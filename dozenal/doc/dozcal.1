." +AMDG
." Process with:
." groff -man -Tascii dozcal.1
.TH dozcal 1 "August 2016" dgoodmaniii dozcal
.SH NAME
dozcal \- a command-line dozenal calendar program
.SH SYNOPSIS
.B dozcal
[\fB\-V\fR]
[\fB\-E\fR]
[\fB\-T\fR]
[\fB\-v\fR]
[\fB\-u\fR]
[\fB\-w\fR]
[\fB\-W\fR \fIfirstdayofweek\fR]
[\fB\-m\fR \fIfull|major\fR]
[\fB\-a\fR \fIastronomical\fR]
[\fB\-g\fR \fIlatitude/longitude\fR]
[\fB\-z\fR \fIoffset\fR]
[\fB\-h\fR \fIreligious\fR]
[\fB\-n\fR \fInational\fR]
[\fB\-s\fR \fIstartdate\fR]
[\fB\-e\fR \fIenddate\fR]
[\fB\-d\fR \fIdateformat\fR]
[\fB\-t\fR \fItimeformat\fR]
[\fB\-r\fR \fIeventformat\fR]
[\fB\-R\fR \fItodoformat\fR]
[\fB\-c\fR \fIconfigfile\fR]
[\fB\-l\fR \fIluascript\fR]
[\fB\-f\fR \fIinputfile\fR]
.SH DESCRIPTION
.B dozcal
A text-based calendar program which operates using dozenal
dates and times.  Uses a simple plain-text file format.
Multiple files can be specified on the command line.  Date
formats and time formats can also be specified on the
command line.  There are options to display religious and
national holidays.  All can further be specified in a
configuration file, which is also plain-text and easily
understandable.
.SH OPTIONS
.TP
.BR \-V
Print version and licensing information, then exit
successfully.
.TP
.BR \-v
Open the visual \fBdozcal\fR program; that is, the text user
interface that will occupy your terminal screen and allow
you to interact with your calendar visually, rather than at
the command line.
.TP
.BR \-E
Do \fInot\fR print events.  Events are printed by default,
so this flag turns event printing \fIoff\fR.
.TP
.BR \-T
Print todos.  Unlike the \fB\-E\fR flag, this turns printing
of todos \fIon\fR, because printing of todos is off by
default.
.TP
.BR \-u
Use UTC time with the astronomical options.  This means that
time zone options will be ignored.
.TP
.BR \-w
Print results for the week including the starting date.
This is any seven-day period; you can set which day of the
week you want to be the first with the \fB\-W\fR option.
Using this will cause any end date given to be ignored.
.TP
.BR "\-W [first day of week]
Set which day of the week you want to be first; has no
effect unless you've requested weekly output.  Accepts an
integer 0-6 (with 0 being Sunday), or a string including at
least the first three letters of the day of the week you'd
like to be first; e.g., "mon".  Capitalization is
irrelevant.
.TP
.BR "\-m [all | major]"
Include the phases of the moon in your output.  This must
take one of two arguments:  "all", which will print the
phase of the moon for all days in your date range; or
"major", which will only print the major phases (i.e.,
"new", "first quarter", "full", and "last quarter").  In
either case, the age of the moon in days is printed as its
phase, with some text for the major phases.
.TP
.BR "\-g [latitude/longitude]"
Gives geographical information necessary for determining
certain astronomical dates and times (particularly those of
the sun).  It can be given in dozenal degrees; in degrees,
minutes, and seconds, or in unciaPi.  Positive longitudes
are east, negative are west.  Similarly, positive latitudes
are north, negative are south.
.RS
.PP
Note that latitude and longitude must be given in that
order, separated by a forward slash (\fB/\fR).
.PP
If the information is given in degrees, minutes, and
seconds, if should be given with \fBo\fR as the degree
marking, with \fB'\fR as the minute marking, and with
\fB"\fR as the second marking; e.g., \fI46o13'26"\fR.  
.PP
If the information is given as dozenal degrees, simply
append \fBo\fR to the number; e.g., \fI46;3324o\fR.
.PP
If the information is given as unciaPi, simply use the
number with no suffix.
.PP
These forms can be mixed freely; e.g., latitude can be given
in dozenal degrees, but longitude in some other format.
.RE
.TP
.BR "\-a [astronomical string]"
If you want certain astronomical information included in
your calendar, use this option.  It takes a single string as
an argument, and the contents of the string determine what
astronomical information will be added.  Some of these
options require geographical information, as given by the
\fB\-g\fR option; if that is not given, the astronomical
options will (almost certainly incorrectly) assume a
latitude of 0 and a longitude of 0.  These strings may be
concatenated however you wish  and in whatever order.
.RS
.TP
.BR season
Includes the astronomical seasons; that is, the March and
September equinoxes, and the June and December solstices.
Lists them as accurately as possible, with times.
.TP
.BR sun
Includes sunrise and sunset for each date in
the requested range.  Requires geographical information.
Note that these are the \fIlocal\fR times; \fBdozcal\fR will
use whatever information is given to it about time zones, if
any, and if it has none, it will guess the time zone based
on your system's time.  Only in the latter case will it know
about daylight savings time.
.RE
.TP
.BR "\-z [offset]"
Gives \fBdozcal\fR a time zone offset to work with.  This is
an \fIoffset\fR, not a time zone name; "EST", for example,
will not get you the results you want.  You want, rather,
"-4;0".  If you don't specify this, \fBdozcal\fR will
attempt to guess time zone information from your system
time.
.TP
.BR "\-h [holiday string]"
Include religious holidays.  This takes a single string as
an argument, and the contents of the string determine which
holidays will be added.  The holidays are added for the year
before your current year, the current year, and the year
after.  These strings may be concatenated however you wish
and in whatever order; e.g., "westjew" and "jew, west" will
give the same result.
.RS
.TP
.BR west
Include Western Christian holidays.  This includes a subset
of Western Christian holidays:  Ash Wednesday, Palm Sunday,
Good Friday, Easter, the Ascension, Pentecost, and
Christmas.
.TP
.BR east
Include Eastern Christian holidays.  This includes a subset
of Eastern Christian holidays:  Clean Monday, Lazarus
Saturday, Palm Sunday, Easter, Mid-Pentecost, the Ascension,
Pentecost, and Christmas.
.TP
.BR jew
Include Jewish holidays.  This setting ignores some of the
prickier issues of the Hebrew calendar, including those
holidays which sometimes fall in the leap month.  Includes
Passover; Yom Kippur; Rosh Hashanah; Hanukkah; and Sukkot.
.TP
.BR isl
Include Islamic holidays.  It's important to remember that
the Islamic calendar is fundamentally observational, not
mathematical; it's therefore impossible to get a perfectly
accurate prediction of when these holidays will occur.  We
can get pretty close, though, and \fBdozcal\fR gets an
approximation that agrees more or less with the other
sources around (which often read "dates may vary" for
precisely this reason).  Includes Ramadan, Eid Al-Fitr, and
Eid Al-Adha.
.RE
.TP
.BR "\-n [national holiday string]"
Include national holidays in your results.  Takes a string
as its argument; the contents of the string determines which
national holidays will be added.  These can be added in
whatever order, and they may or not be separated by other
text; e.g., "eng,rire" is the same as "engrire".  The
holidays will be added for your current year, the previous
year, and the next year.  Supported
national holidays are:
.RS
.TP
.BR usa
Includes all federal American holidays:  New Year's Day,
Martin Luther King Day, Presidents' Day (officially still
called "Washington's Birthday", though it never actually
falls on Washington's birthday), Memorial Day, Independence
Day, Labor Day, Columbus Day, Veterans Day, Thanksgiving
Day, and Christmas Day.  It also includes election day,
though this is not a federal holiday.  Does \fInot\fR
include any of the individual state holidays.
.TP
.BR uk
This option is equivalent to adding \fBend\fR,
\fBwales\fR, \fBscot\fR, and \fBnire\fR.  Since most of
these holidays are shared, this will result in many
duplicates.
.TP
.BR eng
English national holidays.  Includes New Year's Day,
Christmas, Boxing Day, Easter Monday, the Spring Bank
Holiday, and the Late Summer Bank Holiday.
.TP
.BR wales
Welsh national holidays.  These are the same as English
national holidays.  St. David's Day \fIis\fR included,
as it's not an official Welsh holiday, even though it's
observed throughout most of Wales with considerable fanfare.
.TP
.BR scot
Scottish national holidays.  Includes New Year's Day,
Christmas, Boxing Day, Labour Day (May Day), Good Friday,
Spring Holiday, Summer Holiday, and St. Andrew's Day.
.TP
.BR nire
Northern Irish national holidays.  These are the same as
English and Welsh national holidays, with the additional of
St. Patrick's Day and the day of the Battle of the Boyne, or
Orangemen's Day.
.TP
.BR rire
National holidays of the Republic of Ireland.  Includes New
Year's Day, Easter Monday, St. Patrick's Day, May Day, June
Holiday, August Holiday, October Holiday, Christmas, and St.
Stephen's Day.
.TP
.BR austral
Australian national holidays.  Includes New Year's Day,
Australia Day, Good Friday, Easter Monday, Anzac Day, and
Christmas Day.
.TP
.BR "nz | kiwi"
New Zealand's national holidays.  Includes New Year's Day,
the day after New Year's Day, Waitangi Day, Good Friday,
Easter Monday, Labour Day, Anzac Day, the Queen's Birthday,
Christmas, and Boxing Day.
.TP
.BR canada
Includes Canadian national holidays; does \fInot\fR include
provincial holidays.  The national holidays are New Year's
Day; Good Friday; Canada Day; Labour Day; and Christmas Day.
.RE
.RS
.PP
Countries with their holidays not included:  this is not
meant as a slight, I'm just most familiar with these
Anglophone countries and built them in for no other reason.
If you wish to add your country's holidays, have at it;
consider the \fB\-l\fR option, and write a Lua script which
will set those holidays on their proper days and tell
\fBdozcal\fR to include them.
.RE
.TP
.BR "\-s [startdate]"
The first date that you want results from.  If this is not
specified, \fBdozcal\fR will return all results from its earliest
date.
.TP
.BR "\-e [enddate]"
The last date that you want results from.  Combined with
\fB\-s\fR, you can restrict the range of results you'll
receive.  If this isn't specified, \fBdozcal\fR will return
results from the start date until it runs out.
.TP
.BR "\-d [date format string]"
The date format.  These are specified identically to those
of the standard Unix \fBdate\fR command; please see the
documentation for that for more details.  (Note that this
does \fInot\fR include the \fBdozdate\fR extensions,
beginning with \fI@\fR rather than \fI%\fR; they're not
necessary for this problem domain.)
.TP
.BR "\-t [time format string]"
The time format.  Much simpler than date format,
\fBdozcal\fR assumes the use of hours and Tims for time, and
doesn't support anything else at this time.  Only two
interpreted sequences are allowed:
.RS
.TP 
.BR %h
The hours.
.TP
.BR %b
Tims.  These are the number of Tims in an hour, so they cap
off at EEEE.  \fBdozcal\fR will happily display these to
less than 4 digits, if requested.
.RE
.TP
.BR "\-r [event format string]"
The event format.  Each event in your calendar is printed as
a separate record; the argument to this option allows you to
specify its format.  It operates independently of \fB\-d\fR
and \fB\-t\fR, which will still be formatted as you request.
It accepts the following conversion strings:
.RS
.TP 
.BR %e
The event title.
.TP
.BR %d
The event date, formatted as you requested if you've given
\fBdozcal\fR a date formatting string.
.TP
.BR %s
The event's starting time, formatted as you requested if
you've given \fBdozcal\fR a time formatting string.
.TP
.BR %c
The event's closing (ending) time, formatted as you requested if
you've given \fBdozcal\fR a time formatting string.A
.TP
.BR %C
The event's list of categories.
.TP
.BR %t
The event's class.
.TP
.BR %l
The event's location.
.TP
.BR %T
The event's transparency setting.  0 is opaque, 1 is
transparent.
.TP
.BR %a
The list of the event's attendees.
.TP
.BR %u
A URL associated with the event.
.TP
.BR %D
The event's description.
.PP
Event formats can also include newlines, specified in the
usual way as \fI\\n\fR, and tabs, specified in the usual way
as \fI\\t\fR.
.RE
.TP
.BR "\-R [todo format string]"
The todo format.  Each todo in your calendar is printed as
a separate record; the argument to this option allows you to
specify its format.  It operates independently of \fB\-d\fR
and \fB\-t\fR, which will still be formatted as you request.
It accepts the following conversion strings:
.RS
.TP
.BR %i
The todo item; could be called the "title".  It's loaded
from the \fITITLE\fR line in your data file.
.TP
.BR %p
The priority of the todo.
.TP
.BR %d
The due date of the todo.
.TP
.BR %t
The due time of the todo.
.TP
.BR %c
The completedness of the todo; that is, whether you're done
or not.  This is "0" for not done, "1" for done.
.TP
.BR %g
How much progress has been made on the todo.  Given as a
perbiqua (1-100).
.TP
.BR %l
The location of the todo.
.TP
.BR %C
The todo's list of categories.
.TP
.BR %T
The todo's class.
.TP
.BR %u
A URL associated with the todo.
.TP
.BR %D
The todo's description.
.PP
Event formats can also include newlines, specified in the
usual way as \fI\\n\fR, and tabs, specified in the usual way
as \fI\\t\fR.
.RE
.TP
.BR "\-l [luascript]"
Tells \fBdozcal\fR to read a Lua script with its built-in
Lua 5.2 interpreter.  Can be repeated as desired.  This
script can add events to the calendar which are too variable
for a static input file.  As an example, the script
\fIcath_lit_1176.lua\fR is packaged with \fBdozcal\fR, which
implements the entire Roman Catholic calendar of the liturgy
of 1176 (d1962), complete with movable feasts properly
placed.  Please see the section below on Lua scripting for
details.
.TP
.BR "\-f [inputfile]"
Names an input data file for \fBdozcal\fR to use.  (See the
section below about how to format such data files.)  This
option can be specified more than once; \fBdozcal\fR will
use all the files so specified, sorting them without regard
to the order of their inclusion.
.TP
.BR "\-c [configfile]"
Names a config file for \fBdozcal\fR to use.  (See the
section below about how to format such config files.)  If
not specified, \fBdozcal\fR will look for
\fI$HOME/.dozcal/dozcalrc\fR; if it cannot find that, it will
proceed without any config files.  If this is specified
multiple times, any options in later config files will
override those in earlier ones.
.RS
.PP
Command line options listed \fIafter\fR the config file
option will take precedence; those listed \fIbefore\fR will
be overridden if the config file contradicts them.
.PP
Because \fBdozcal\fR assumes you want a config file, it does
everything it can to find one; if you specifically want
\fBdozcal\fR \fInot\fR to use a config file, use this option
with the argument "\-" (a hyphen); this will cause
\fBdozcal\fR to use only its defaults in all cases.
.RE
.SH FILES
\fBdozcal\fR uses two files primarily:  the data, or library
file, which has the actual library information in it, and a
run-control, or config file, which contains simple lines to
control \fBdozcal\fR's behavior.
.SS The Data File
.PP
\fBdozcal\fR works with data files that follow a simple but
specific format.  Each record begins with a line containing
the string \fI[EVENT]\fR, \fI[TODO]\fR, or \fI[JOURNAL]\fR,
and ends either at the end of the file or at the next line
containing one of those strings; blank lines are ignored, as
are any lines with \fI#\fR as their first character (comment
lines).
.PP
Within each event, you must specify at least a \fITITLE\fR
and a \fISTART_DATE\fR.  The following are recognized
fields:
.RS
.TP
.BR TITLE:
Gives the title of the event; e.g., "Meeting with Roy" or
"Traffic Court".
.TP
.BR START_DATE:
The date on which the event occurs.  It is called start-date
because many events recur on the calendar, but this one
serves as either the only event or the first day of a
recurring event.
.TP
.BR END_DATE:
The last date of the event, and (if you've specified an
\fIINTERVAL\fR for this event) the last day that
\fBdozcal\fR will check to see if a recurrence should occur.
.TP
.BR INTERVAL:
The number of days' interval for a recurring date.  That is,
starting at the \fISTART_DATE\fR, how many days should
\fBdozcal\fR skip before placing the event on the calendar
again?  To make a weekly event, for example, say
\fIINTERVAL:  7\fR.  If you say \fIINTERVAL:  1\fR, the
event will occur every day (in which case, you may as well
not specify an interval, because \fBdozcal\fR will assume
you mean every day until the \fIEND_DATE\fR unless you tell
it otherwise).
.RS
.PP
If you've utilized the \fIFREQ\fR option, this interval will
be the number of that unit.  E.g., if your \fIFREQ\fR is
"monthly", it will be \fIinterval\fR number of months.
.RE
.TP
.BR FREQ:
This gives a generalized statement of the frequency of the
event.  If you're using a standard number of days, then
there is no need for this line, as \fIINTERVAL\fR works with
a number of days by default.  If, on the other hand, you're
working with some other interval (say, months), \fIFREQ\fR
is what you need.
.RS
.PP
\fIFREQ\fR works by a pretty simple heuristic.  If it finds
the name of a weekday, then it looks for an ordinal number
(e.g., "first", "second", "third", "fourth", or "last").  If
it finds one, then it looks for the name of a month (at
least the first three letters of one).  If it finds all
three of these, it interprets this as asking for the event
on the ordinal of that weekday of that month.  An example
would be "Third Tuesday of April."
.PP
If it finds a weekday and an ordinal but not the name of a
month, it interprets this as the ordinal of that weekday for
every month in your range (from your given \fISTART_DATE\fR
to your given \fIEND_DATE\fR, or for the given month
if you gave no \fIEND_DATE\fR).  An example would be
"the last Thursday".
.PP
If it finds a weekday but no ordinal or month name, it
interprets this as that weekday every month between
\fISTART_DATE\fR and \fIEND_DATE\fR, or for the start date's
month if there is not \fIEND_DATE\fR.  An example might be
"Wednesdays".
.PP
If it finds no weekday, no ordinal, and no month name, it
looks for the strings "monthly" or "yearly" (with no regard
to capitalization; the search is case-insensitive).  It it
finds "monthly", it will repeat the event every month
from \fISTART_DATE\fR to \fIEND_DATE\fR (or to the end of
the following year if there is no \fIEND_DATE\fR).  If it
finds "yearly", it will do the same every year.
.PP
If you want something repeated daily, or at some interval of
days, don't bother with \fIFREQ\fR at all; just use
\fIINTERVAL\fR, which assumes that it's working with days.
However, does respect \fIINTERVAL\fR; so if your interval
is "3", and your \fIFREQ\fR is "monthly", \fBdozcal\fR will
place the event on the appropriate date every third month.
.PP
Note that while this system is designed to enable
English-like syntax, it's not necessary; "third Tuesday in
August" will yield the same results as "August Tuesday
third".
.RE
.TP
.BR EXCEPT_DATE:
In a recurring event, \fIdon't\fR add an event on this date,
even if it otherwise qualifies.  You can have as many of
these as you'd like.
.TP
.BR START_TIME:
The time you'd like this to start.  This can be specified in
either our normal dozenal-sexagesimal time (two dozen hours
in a day, five dozen minutes in an hour), or in TGM (two
dozen hours in a day, divided into 10000 Tims each).
\fBdozcal\fR will interpret the time as dozenal-sexagesimal
if you use a colon (\fI:\fR) to separate the hours from
minutes; if you use a semicolon (\fI;\fR), or no
punctuation, it will interpret the time as hours and Tims.
.TP
.BR END_TIME:
The obvious corrollary of \fISTART_TIME\fR.
.TP
.BR LOCATION:
Pretty self-explanatory, as well; where the event is going
to occur.
.TP
.BR CLASS:
Typically a single word to describe something special about
the event; for example, "private" or "public."
.TP
.BR CATEGORY:
You can specify this line as many times as necessary.
Typically just describes the type of the event; for example,
"Anniversary" might fall under both "marriage" and
"personal".  If you put this in your formatting string,
multiple categories will be printed together, separated by a
a comma.
.TP
.BR TRANSPARENT:
This specifies whether the event should be visible when
determing busy times or not.
.TP
.BR ATTENDEES:
Simply lists attendees at an event, if any exist.  At some
point, the ability to send emails to those listed here will
be added.  A comma-separated list, like categories.
.TP
.BR URL:
Gives a URL associated with the event.
.TP
.BR DESCRIPTION:
A string of arbitrary length and content, describing what
exactly the event is.
.RE
.PP
An example record:
.RS
[EVENT]
.br
START_DATE:  1200-0X-27
.br
END_DATE:  1200-0E-0X
.br
START_TIME:  0X00
.br
END_TIME:  1E30
.br
EXCEPT_DATE:  1200-0E-04
.br
EXCEPT_DATE:  1200-0E-05
.br
TITLE:  My Test Event #1
.RE
.PP
Events are sorted first by start date; then by start time;
then by title.
.PP
Todos are formatted similarly; naturally, however,
their possible categories are a bit different.  Possible
fields are:
.RS
.TP
.BR TITLE:
The todo's title or description.  For example, "Finish the
taxes" or "buy birthday present for Susie."
.TP
.BR DUE_DATE:
Self-explanatory.
.TP
.BR DUE_TIME:
Self-explanatory.
.TP
.BR COMPLETED:
If for some reason you want to keep completed todos in your
list, you can set this flag to make it clear that it's
already done.  A "0" indicates that the item is \fInot\fR
complete; a "1" indicates that it is.
.TP
.BR PERGROSS:
Gives the degree of completion of the todo, considered as
parts per biqua.  E.g., if you're half-done with a todo, you
might want to set this as "60".  Do \fInot\fR use a "%".
.TP
.BR LOCATION:
Self-explanatory.
.TP
.BR CLASS:
Same as for events.
.TP
.BR CATEGORY:
Same as for events.
.TP
.BR PRIORITY:
How important this todo is, expressed as an integer.  Lower
integers are more important.
.TP
.BR URL:
Same as for events.
.TP
.BR LOCATION:
Same as for events.
.TP
.BR DESCRIPTION:
Same as for events.
.RE
.PP
Todos are sorted first by priority; then by due date; then
by due time; and then by title.
.SS The Config File
.PP
\fBdozcal\fR's config file is very simply formatted; the
option is specified in all-caps, followed by a colon,
followed by some optional space, and finally followed by the
value.  Anything that can be specified on the command line
can also be specified in the config file.  By default, if
you don't give \fBdozcal\fR a config file with \fI\-c\fR, it
will look for one at \fI$HOME/.dozcal/dozcalrc\fR; if it can't find
that, it will print a message to stderr and then continue
with no config file.
.PP
Possible options in the config file are:
.RS
.TP
.BR NATIONAL:
Specifies the national holidays you want listed.  Argument
is listed exactly as for the \fI\-n\fR command line option.
.TP
.BR RELIGIOUS:
Specifies the religious holidays you want listed.  Argument
is listed exactly as for the \fI\-h\fR command line option.
.TP
.BR MOON_PHASE:
Specifies the way in which you want moon phases listed.
Argument is exactly as for the \fI\-m\fR command line
option.
.TP
.BR DATE_FORMAT:
The format for the date when displayed.  Argument is exactly
as for the \fI\-d\fR command line option.
.TP
.BR TIME_FORMAT:
The format for the time when displayed.  Argument is exactly
as for the \fI\-t\fR command line option.
.TP
.BR EVENT_FORMAT:
The format for the events when they are printed.  Argument
is exactly as for the \fI\-r\fR command line option.
.TP
.BR TODO_FORMAT:
The format for the todos, if they are to be printed.
Argument is exactly as for the \fI\-R\fR command line
option.
.TP
.BR INPUT:
Specifies a data file for \fBdozcal\fR to use, similar to
the \fI\-f\fR command line option.  You can include as many
of these as you like, and even mix them with \fI\-f\fR on
the command line, but be aware that if you name the same
file more than once, it will be included more than once;
\fBdozcal\fR assumes that you tell it what you really want
and does not check for duplicate files.
.TP
.BR SCRIPT:
Specifies a Lua script for \fBdozcal\fR to run and take
input from.  You can include as many of these as you like,
and even mix them with \fI\-l\fR on the command line, but be
aware that if you name the same file more than once, the
events that the script adds will be added twice.
\fBdozcal\fR assumes that you tell it what you really want
and does not check for duplicate files.
.TP
.BR WEEKLY
Tells \fBdozcal\fR that you want it to give you weekly
output.  This will only work if you've given it an explicit
start date; otherwise it can't know what week to give you.
It will also ignore whatever end date, if any, you've given
it.
.TP
.BR FIRST_DOW:
First day of the week; only has effect when you've asked for
weekly output.  Can be an integer 0-6 (with 0 being Sunday),
or a string containing at least the first three letters of
the weekday.  Capitalization is irrelevant.
.RE
.SH VISUAL INTERFACE
.PP
\fBdozcal\fR comes with an \fBncurses\fR interface that
allows you to visually track your calendar and todos.  Note
that the visual interface \fIdoes not alter your data in any
way\fR; by design, one does not add or remove things from
your data through the visual interface.  It merely allows
you to browse your data in an easier way.
.PP
The visual interface respects your formatting directives, so
it's often best to have special formatting applied when
you're using it, so that it will fit more easily in the
appropriate windows.  One that I've found pretty useful for
events is the following:
.PP
.RS
%d %e \\n\\t %s -- %c
.RE
.PP
Control of the visual interface is pretty simple, and
enunciated clearly in the lower bar of the window.  Tab and
shift-tab rotate through the windows; each window can be
navigated with the arrow keys or with h/j/k/l.
.PP
All the colors of the interface are configurable, to a
probably completely unnecessary degree.  Each individual
element of the interface can be colored independently of all
others, and the colors themselves can be either named or
specified by RGB contents (expressed, of course, dozenally).
.SS Elements to be Colored
.PP
All elements to be colored are specified in all-caps,
followed by a colon and zero or more spaces or tabs; the
color specification then comes after.  They are put, of
course, into your config file.
.PP
.RS
.TP
.BR NOCOLOR
Tells \fBdozcal\fR that you don't want it to use color at
all; it will then simply use the terminal's default colors.
.TP
.BR CALENDAR_BG
Your calendar window (the one with the monthly calendar
in it, with the date you're currently viewing highlighted)
have a background color where it has no other elements; this
sets it.
.TP
.BR EVENT_BG
Like CALENDAR_BG, but for your event window.
.TP
.BR TODO_BG
Like CALENDAR_BG and EVENT_BG, but for your event window.
.TP
.BR CAL_TITLE_FORE
The foreground (that is, the text color) of your calendar
window's title.
.TP
.BR CAL_TITLE_BACK
The background of your calendar window's title.
.TP
.BR CAL_WEEK_FORE
The foreground (that is, the text color) of the actual
week text (listing the days of the week) in your calendar window.
.TP
.BR CAL_WEEK_BACK
The background of the actual week text (listing the days of
the week) in your 
calendar window.
.TP
.BR CAL_FORE
The foreground (that is, the text color) of the actual day 
numbers in your calendar window.
.TP
.BR CAL_BACK
The background of the actual day numbers in your calendar window.
.TP
.BR TODO_TITLE_FORE
The foreground (that is, the text color) of your todo
window's title.
.TP
.BR TODO_TITLE_BACK
The background of your todo window's title.
.TP
.BR TODO_LINE_FORE
The foreground of the line separating your todo title from
your actual todos.  This amounts to the line's actual color.
.TP
.BR TODO_LINE_BACK
The background of the line separating your todo title from
your actual todos.  Chiefly useful for matching to TODO_BACK
or TODO_TITLE_BACK, or for making it the same as
TODO_LINE_FORE to cause the line to disappear.
.TP
.BR TODO_FORE
The foreground (that is, the text color) of your todo
window's text.
.TP
.BR TODO_BACK
The background of your todo window's text.
.TP
.BR EV_TITLE_FORE
The foreground (that is, the text color) of your event
window's title.
.TP
.BR EV_TITLE_BACK
The background of your event window's title.
.TP
.BR EV_LINE_FORE
The foreground of the line separating your event title from
your actual events.  This amounts to the line's actual color.
.TP
.BR EV_LINE_BACK
The background of the line separating your event title from
your actual events.  Chiefly useful for matching to EV_BACK
or EV_TITLE_BACK, or for making it the same as
EV_LINE_FORE to cause the line to disappear.
.TP
.BR EV_FORE
The foreground (that is, the text color) of your event
window's text.
.TP
.BR EV_BACK
The background of your event window's text.
.TP
.BR TITLE_FORE
The foreground (that is, the text color) of the line at the
top of the screen (the title line).
.TP
.BR TITLE_BACK
The background of the line at the top of the screen.
.TP
.BR BOT_FORE
The foreground (that is, the text color) of the line at the
bottom of the screen.  This is the line which contains the
ordinary key commands.
.TP
.BR BOT_BACK
The background of the line at the
bottom of the screen.  This is the line which contains the
ordinary key commands.
.TP
.BR WARNING_FORE
The warning line is the very bottom line of the screen; it
prints the few warnings that \fBdozcal\fR occasionally needs
to print (e.g., about not supporting certain colors).  This
is the foreground (the text color) for this line.
.TP
.BR WARNING_BACK
The warning line is the very bottom line of the screen; it
prints the few warnings that \fBdozcal\fR occasionally needs
to print (e.g., about not supporting certain colors).  This
is the background for this line.
.TP
.BR INACTIVE_BORDER_FORE
Each window has a border, and that border can be either
active (that is, it's the window you're currently
navigating) or inactive.  This sets the foreground (the line
color) of the inactive windows.
.TP
.BR INACTIVE_BORDER_BACK
Each window has a border, and that border can be either
active (that is, it's the window you're currently
navigating) or inactive.  This sets the background
of the inactive windows.
.TP
.BR ACTIVE_BORDER_FORE
Each window has a border, and that border can be either
active (that is, it's the window you're currently
navigating) or inactive.  This sets the foreground (the line
color) of the active window.
.TP
.BR ACTIVE_BORDER_BACK
Each window has a border, and that border can be either
active (that is, it's the window you're currently
navigating) or inactive.  This sets the background
of the active window.
.TP
.BR WHOLE_EV_BG
The background color of whatever part of the event window
that is
not occupied by some other color.  Probably should be
matched to EV_BACK.
.TP
.BR WHOLE_TODO_BG
The background color of whatever part of the todo window
that is
not occupied by some other color.  Probably should be
matched to TODO_BACK.
.RE
.PP
Obviously, this ability to customize colors can be either
used or abused.  For example, a fairly nice, low-key theme
used by \fBdozcal\fR's author is the following:
.PP
.RS
.br
ACTIVE_BORDER_FORE: red
.br
INACTIVE_BORDER_FORE: green
.br
TITLE_FORE:  blue
.br
TITLE_BACK:  yellow
.br
EV_LINE_FORE:  green;
.br
TODO_LINE_FORE:  green;
.br
BOT_FORE:  blue
.br
BOT_BACK:  yellow
.br
WARNING_FORE:  red
.RE
.PP
This matches the default \fBxterm\fR theme I use and color
themes I have for other text-interface programs (like
\fBmutt\fR, \fBnewsbeuter\fR, and \fBminlib\fR).  Of course,
some truly garish concoctions can also be devised.  Taste,
as always, is vital.
.SS Color Specifications
.PP
Many terminal emulators (notably \fBxterm\fR) support only a
limited number of colors; if that's the case, and you try to
specify a color that isn't support, \fBdozcal\fR will warn
you when you start up the visual interface on the bottom
line.  It will then convert the color you asked for into its
nearest acceptable equivalent and use that.  If your
terminal \fIdoes\fR support arbitrary colors, then have at
it.
.PP
\fBdozcal\fR recognizes only a few colors by name; namely,
\fIred\fR, \fIblue\fR, \fIgreen\fR, \fIyellow\fR,
\fImagenta\fR, \fIcyan\fR, \fIblack\fR, and \fIwhite\fR.
You can use these freely in your color definitions, and
these should work on any terminal or terminal emulator that
supports color at all.
.PP
For other colors, \fBdozcal\fR allows you to enter them in
an RGB specification format, with each element represented
by a 0-1000 (dozenal) number.  For example:
.PP
.RS
.br
(1000,0,0) is equivalent to "red"
.br
(0,1000,0) is equivalent to "green"
.br
(1000,900,0) is a reasonably value for something like
orange.
.RE
.PP
If you define colors this way in your config file and then
use \fBdozcal\fR where color isn't supported, fear not;
you'll still get a \fBdozcal\fR with colors.  \fBdozcal\fR
will simply mutate those colors; any value of 600 or greater
will be turned into 1000, and any value of less than 600
will be turned into 0.  So the (1000,900,0) given above for
orange will be turned into (1000,1000,0), or "yellow", which
is as close as such terminals can come to orange.
.SH ERRORS
.PP
\fBdozcal\fR emits fairly specific error codes when things
go wrong.  Successful completion is returned to the
environment as \fI0\fR.
.TP
.BR 1
You supplied \fBdozcal\fR an option which requires an
argument, but didn't send it an argument.  E.g., you said
\fB\-s\fR, but didn't say what you wanted the starting date
of your results to be.
.TP
.BR 2
You gave \fBdozcal\fR an option that it doesn't recognize.
.TP
.BR 3
There's insufficient memory for something that \fBdozcal\fR
needs to do; see the error message emitted to see what
exactly it was.
.TP
.BR 4
\fBdozcal\fR is trying to open a file you gave it (perhaps
with \fB\-f\fR or \fB\-c\fR), but is running into problems.
\fBdozcal\fR will print an error message detailing the
specific error.
.TP
.BR 5
You've given a conversion character in your time format
(perhaps with the \fB\-t\fR option) that \fBdozcal\fR
doesn't recognize.
.TP
.BR 6
You've given a conversion character in your event format
(perhaps with the \fB\-r\fR option) that \fBdozcal\fR
doesn't recognize.
.TP
.BR 7
The phrase you've entered for the moon phase option doesn't
make sense to \fBdozcal\fR; please use either \fIfull\fR or
\fImajor\fR.
.TP
.BR 8
The file you've specified for your config file isn't working
correctly; see the specific error message for reasons.
.TP
.BR 9
You've given a conversion character in your todo format
(perhaps with the \fB\-R\fR option) that \fBdozcal\fR
doesn't recognize.
.TP
.BR 10
Your FREQ specification isn't in a format the \fBdozcal\fR
can interpret.
.TP
.BR 11
\fBdozcal\fR found an error in a Lua script that you've
included, either from the config file or by using the option
\fB\-l\fR.  Repair your Lua script and try again.
.TP
.BR 12
\fBdozcal\fR can't understand what you gave it for a first
day of the week.
.SH BUGS
.PP
The last event included via Lua script is included twice.  I
can't figure out why this is so or how to fix it.
.SH AUTHOR
Donald P. Goodman III <dgoodmaniii at gmail dot com>
.SH SEE ALSO
.BR doz (1),
.BR dozdc (1),
.BR tgmconv (1),
.BR dozdate (1),
.BR dozcal (1),
.BR dozword (1),
.BR doman (1),
.BR dozstring (1),
.BR dozpret (1)
